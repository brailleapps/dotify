apply plugin: "maven"
apply plugin: "signing"
//custom plugins
apply plugin: "org.dm.bundle"

repositories {
    mavenCentral()
    //mavenLocal()
    //maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

dependencies {
    provided group: "biz.aQute.bnd", name: "annotation", version: "2.3.0"
    compile "org.daisy.dotify:dotify.api:1.4.0"
    compile "org.daisy.dotify:dotify.common:1.2.0"

    runtime group: 'woodstox', name: 'wstx-lgpl', version: '3.2.7'
    testCompile group: "junit", name: "junit", version: "4.7"
    testCompile 'org.daisy.braille:braille-utils.api:2.0.0'
    testCompile 'org.daisy.braille:braille-utils.pef-tools:1.0.0'
    testCompile "org.mockito:mockito-core:1.10.19"
    
	testRuntime group: group, name:'dotify.hyphenator.impl', version:'1.0.0'
	testRuntime group: group, name:'dotify.text.impl', version:'1.0.0'
	testRuntime group: group, name:'dotify.translator.impl', version:'1.1.0'
}

buildscript {
    repositories { mavenCentral() }
    dependencies { classpath group: "org.dm.gradle", name: "gradle-bundle-plugin", version: "0.6.2" }
}

task updateBndVersion() << {
	String contents = file('bnd.bnd').getText('UTF-8')
	file('bnd.bnd').write(contents.replaceAll('Bundle-Version: [\\d\\.A-Za-z\\-]+', "Bundle-Version: $version"), 'UTF-8')
}

ext.writeTestsOverviewFile = { folderPath, fileName ->
	def folder = file(folderPath)
	def f = new File(folder, fileName)
	f.write('<?xml version="1.0" encoding="UTF-8"?>\n')
	f.append('<?xml-stylesheet href="display.xslt" type="text/xsl" ?>\n')
	f.append('<tests>\n')
	FileTree list = fileTree(dir: folder)
	list.include '*-input.obfl'
	list.each {
		def exp = it.name.substring(0, it.name.length()-11) + '-expected.pef'
		if (new File(folder, exp).exists()) {
			f.append('<test input="'+it.name+'" expected="' + exp + '"/>'+'\n')
		}
	}
	f.append('</tests>')
	copy {
		from('display.xslt')
		into(folderPath)
	}
}

task updateTestsOverviewFile() << {
	// There are more tests in this folder with another naming standard, but they
	// don't suit the presentational format and are more of integration tests.
	// Additional tests should be written based on these.
	writeTestsOverviewFile('test/org/daisy/dotify/engine/impl/resource-files', 'tests-overview.xml')
}

bundle {
    instructions << [
        "-include": file('bnd.bnd'),
        'Built-By': System.getProperty("user.name"),
        'Built-On': new Date().format('yyyy-MM-dd'),
        'Repository-Revision': "$repositoryRevision",
        'Repository-URL': "$repositoryURL"
    ]
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
	//Only upload if a git hash is supplied. On Travis only upload snapshots.
	enabled = repositoryRevision.size()==40 && (System.getenv("TRAVIS_BUILD_ID")==null || version.endsWith("SNAPSHOT"))
    repositories {
        mavenDeployer {
            if (isReleaseVersion) {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            }
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            pom.project {
                name 'dotify.formatter.impl'
                packaging 'jar'
                description 'Dotify Formatter'
                url 'https://github.com/joeha480/dotify/'
                scm {
                    connection 'scm:git:https://github.com/joeha480/dotify.git'
                    developerConnection 'scm:git:https://github.com/joeha480/dotify.git'
                    url "$repositoryURL"
                }
                licenses {
                    license {
                        name 'LGPL'
                        url 'http://www.gnu.org/licenses/lgpl.html'
                    }
                }
                developers {
                    developer {
                        id 'joel'
                        name 'Joel HÃ¥kansson'
                    }
                }
            }
        }
    }
}